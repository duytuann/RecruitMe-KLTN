/********************************************************************
 *
 *  PROPRIETARY and CONFIDENTIAL
 *
 *  This file is licensed from, and is a trade secret of:
 *
 *                   AvePoint, Inc.
 *                   525 Washington Blvd, Suite 1400
 *                   Jersey City, NJ 07310
 *                   United States of America
 *                   Telephone: +1-201-793-1111
 *                   WWW: www.avepoint.com
 *
 *  Refer to your License Agreement for restrictions on use,
 *  duplication, or disclosure.
 *
 *  RESTRICTED RIGHTS LEGEND
 *
 *  Use, duplication, or disclosure by the Government is
 *  subject to restrictions as set forth in subdivision
 *  (c)(1)(ii) of the Rights in Technical Data and Computer
 *  Software clause at DFARS 252.227-7013 (Oct. 1988) and
 *  FAR 52.227-19 (C) (June 1987).
 *
 *  Copyright © 2024 AvePoint® Inc. All Rights Reserved.
 *
 *  Unpublished - All rights reserved under the copyright laws of the United States.
 */
/* generate spacing */
@mixin generate-spacing($prefix, $property) {
  $sizes: 0, 2, 4, 8, 12, 16, 24, 32, 48, 64, 96;
  $spacing: 0.0625rem;
  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);

    .#{$prefix}-#{$size} {
      #{$property}: $spacing * $size !important;
    }
  }

  .#{$prefix}-auto {
    #{$property}: auto !important;
  }
}

@mixin generate-spacing-plus($prefix, $property1, $property2) {
  $sizes: 0, 2, 4, 8, 12, 16, 24, 32, 48, 64, 96;
  $spacing: 0.0625rem;
  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);

    .#{$prefix}-#{$size} {
      #{$property1}: $spacing * $size !important;
      #{$property2}: $spacing * $size !important;
    }
  }

  .#{$prefix}-auto {
    #{$property1}: auto !important;
    #{$property2}: auto !important;
  }
}

/* generate display class */
@mixin generate-display() {
  $displays: none, inline, inline-block, block, table, table-row, table-cell,
    flex, inline-flex, grid;
  @for $i from 1 through length($displays) {
    $value: nth($displays, $i);

    .hcis-#{$value} {
      display: $value;
    }
  }
}

/* generate position class */
@mixin generate-position() {
  $position: static, relative, absolute, fixed, sticky;
  @for $i from 1 through length($position) {
    $value: nth($position, $i);

    .hcis-#{$value} {
      position: $value;
    }
  }
}

/* generate flex or grid utils class */
@mixin generate-flex-grid-utils() {
  $justify-key: normal, start, end, center, between, around, evenly, stretch;
  $justify-value: normal, flex-start, flex-end, center, space-between,
    space-around, space-evenly, stretch;
  @for $i from 1 through length($justify-key) {
    $key: nth($justify-key, $i);
    $value: nth($justify-value, $i);

    .hcis-justify-#{$key} {
      justify-content: $value;
    }
  }

  $wrap-value: wrap, wrap-reverse, nowrap;
  @for $i from 1 through length($wrap-value) {
    $value: nth($wrap-value, $i);

    .hcis-flex-#{$value} {
      flex-wrap: $value;
    }
  }
}

/* Media breakpoint */
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - 1, null);
}
@function breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: index($breakpoint-names, $name);
  @return if(
    $n != null and $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}
@mixin media-breakpoint-down-contain($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-min($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
@mixin media-breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-between-noend(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);
  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max: breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}
